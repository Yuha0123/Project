#include "game.h"

char map[35][100];

/*
 Map object
 
 0: 비어있음 
 1: 벽 
 p: 플레이어 시작 위치 
 k: 열쇠 
 l: 잠긴 문 
 h: 가시 
 r: 바위  
 2: 총알(가로) 
 3: 총알(세로)  
 a,b,c,d,e: 기계문 
 A,B,C,D,E: 레버 
 t: 속삭이는 뿌리 
 g: 꿈의 정수 
 Z: 차원문  
 
 Empty Map data sample: 
 
 	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"    
 
 
 
 
*/

char map1[35][100] = { // 잊혀진 교차로  
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"011111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000",
	"01000000000000000000000000000000000000000000000000000000000000A100000000000000000000000000000000",
	"0100p0011111111111111111111111111111111111111111a11111111111111100000000000000000000000000000000",
	"010000010000000000000000000000000000000000000001010000000000000000000000000000000000000000000000",
	"011111110000000000000000000000000000011111111111r11111000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000010000010000000001000000000000000000000000000000000000000000",
	"0000000000000000000000000000000000000100k0010001010001000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000010000010001110001111111111000000000000000000000000000000000",
	"00000000000000000001111111111111111001000001000000000l000000001000000000000000000000000000000000",
	"00000000000000000001000000100r000010010000010000k00001111111001000000000000000000000000000000000",
	"0000000000000000000100011111r1111010010000010000000001000001h01111111111000000000000000000000000",
	"00000000000000000001000100r001001010010011111111111111000001001000000001000000000000000000000000",
	"000000000000000000010000001101111b111100000000000100000111110h1000000001000000000000000000000000",
	"0000000000000001111111011111112000003111111111100100000100000000000s0001000000000000000000000000",
	"000000000000000120000000000001000000010000000010010000010001hh1000000001000000000000000000000000",
	"000000000000000100000000000021000h00011111111110011111110h01111000000001000000000000000000000000",
	"00000000000000010000000000000100hhh0000000000000000000000001001111111111000000000000000000000000",
	"000000000000000120000000000001000h0001111111111cc11111111111000000000000000000000000000000000000",
	"00000000000000010000000000002100000001000000001001h00010r001000000000000000000000000000000000000",
	"000000000000000100000000000001300000211111100010010010101011000000000000000000000000000000000000",
	"00000000000000010000000000000111101111000010001g010h10101010000000000000000000000000000000000000",
	"0000000000000001111111011111111110000000B0100010010010101010000000000000000000000000000000000000",
	"00000000000000000001000001000000100000000010001001h010001k10000000000000000111111100000000000000",
	"000000000001111111110000010000001111111111111110010011111111111111111111111100000100000000000000",
	"000000000001C000000l00000100t000l000g0000000g000000000g00000000000000000000000Z00100000000000000",
	"000000000001111111111111110000001111111111111110011111111111111111111111111100000100000000000000",
	"000000000001g00000000000000000001000000000000010010000000000000000000000000111111100000000000000",
	"000000000001111111111111111111111000000001111110011000000000000000000000000000000000000000000000",
	"00000000000000000000000000000000000000000100g000001000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000001000s00001000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000001000000001000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000001111111111000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"    
};

char map2[35][100] = { // 녹색거리   
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000001110000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000011111111110001310000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000012000000011111010000000000000000000000000000000000000000000000000000000000",
	"00000000000000000000001111010101g000010000000000000000000000000000000000000000000000000000000000",
	"00000000000000000000001D000100210111011100000000000000000000000000000000000000000000000000000000",
	"000000000000000000000011111101010100000100000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000100210100000100000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000101010100000100000000000000000000000000000001111111000000000000000000",
	"000001111100000000000000000100210103030100000000000000000000000001110001000001111100000000000000",
	"000001310111111111111111111101010101110100000000000000000000011111011111ee100000h100000000000000",
	"00000101010000000000000000010000010000010000000000000000000001000000000000100000h100000000000000",
	"000001000101111111111111110111111111010100000000000000000000010001r111110011111r1100000000000000",
	"000001010100000000000000010l00000000010111111111111111111111110s01013031001000101000000000000000",
	"0000010101111111111111110111111111110101g00h0000000d00000000010001010g010010E0101000000000000000",
	"00000101010000000000001h00010000000001000h000111111111101111011111010001001000101000000000000000",
	"0000010101110111111110111101100s000111111111110000B100000001000001010001001000101000000000000000",
	"0000010101h0000000001000000h10000001h00kh1000101111100hhh001111101010h010010h0101000000000000000",
	"0001110101111111111c111111111111111hh0h111000101000000000000000101010h010010h0101000000000000000",
	"00010001000000000000000000000000hhhh00h10000100100g000000000000101010001001000101000000000000000",
	"00010101011100111100011111111h0hhhhh0h10000001010000000t0000000101010001001000101000000000000000",
	"0001010131010010000000001001h000hhhh0h1000000101000000000000000101010001001000101000000000000000",
	"000101111101001000000000101hh0hh000h0h1000000101000000000000000101010000000303101111111110000000",
	"0001200000010010000s0000101h00h00h000h111110010011111111111111100101hhhhhhhhhh100000000010000000",
	"0001h00h00h1001000000000101h0000hhhhh11100111101110000030003000001011111111111101111111010000000",
	"00010000000100100000000011hhhhhh000h120000001101110000000000000001012000000000000000000010000000",
	"000111110111bb11111111111hh000h00h0h12000000103r010000000g00000001011111111111111111111010000000",
	"000000100100000000000l001h00h000hh0h100111101111010000000000000001010000000000000000001010000000",
	"0000001C1000000000001110000hAhhh000h100120000000010000003030000001010000000000000000011011000000",
	"000011110000000000010001111h00000hh1000111111111110111111111111111010000000000000000100000100000",
	"0000100000000000000010000001111111100h100g000000000000000000000000310000000000000001000Z00010000",
	"000010000011111000000111111000hh0000h11111111111111111111111111111110000000000000000100000100000",
	"000010p001000001000k000a0000h0000hhh100000000000000000000000000000000000000000000000011111000000",
	"000010000100000010000111111111111111000000000000000000000000000000000000000000000000000000000000",
	"000001111000000001111000000000000000000000000000000000000000000000000000000000000000000000000000"    
};


char map3[35][100] = { // 수정봉우리  
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000011100000000000000000000000001111111111111111111111111000000000000000011111111100000",
	"00000000000001k100000000000000000000000001g0000l000000000l00000001000000000000000110000000111000",
	"000000000111110111110000000000000000000001110111111101111111111101000001111111111100g0p000001000",
	"00000000012000000001000000000000000000000001010000100013030000k101111111000000000000000000101000",
	"000000000100000000210000000000000000000001110111001000100011111100010000011111111111111111101000",
	"00000000012000000001000000000000000000000120000100100010001h00a00h000h00h10000010000001000101000",
	"00000000011111011111000000000000000000000100002100100010001001111hhghhhh1100k00100A0001010101000",
	"000000000000010100001111111111111000000001200001001000100010h10011hh1111110000010000001010101000",
	"0000000000000101001110000310310D1111111111000021001000100010011111111hh111111h0h1111101010101000",
	"0000000000000101011010h1001000g010001B000120000100100010001h0000000h000h110h1100h100101010101000",
	"000000000000010101h000h100100000100011110100h00100100010001111hhhh0h0h00h10g0h10h100101010101000",
	"000000000000010101h01hh100000111101200000100h00100100010000001111h000hh0h10h0010h100101010101000",
	"000000000000010101h0111111100103001011110100002100100010300000001hhhh1101101h010h100101010101000",
	"000000000000010101h011010h10010010120000012000010010001111100g001111110000010010h100101010101000",
	"000111111111110101h0100r01100100100011111100002100100000001110000000011111110h10h100101010101000",
	"000100000000000101hr1101r0130100130010000120000100100011100011111100000000h10000h100101010101000",
	"000101111111111101h000r10r111100111111101100002111100000111000000111111100h1hhhhh1001g0010001000",
	"000101000000000001hhhh0100r0l00000000000000000000g100000001111110000000000h111111100111111111000",
	"000101000111111111111111111111001110111b11111111111000000000000111111111111131000000000000000000",
	"000101000100k000030031hhh1000100100000100000000000100000s0000t0013100000e00001000000000000000000",
	"000101011101110000000100010h01001000001c11111111101000000000000010101000111101000000000000000000",
	"000101010001g1000000000h0h010100100s0010000000001011111111111111101010001h0301000000000000000000",
	"0001010101C1010030030111000100301000001d111111101000000000000000001013031h0011000000000000000000",
	"000101010111011111111101111111111111111011000010111111111111111110101h0h1h0001000000000000000000",
	"0001010100000100000000000000000000001000001000101h0000001000001310101000100001000000000000000000",
	"000101111111110000011111111100000000100g001000101h01111010000010101010h0101111111111100000000000",
	"00010000000001111111000g00010000000010000010011011000g1010000010001E100012000000000g100000000000",
	"0001111111110000000000000001000000001110111001h0h11111101000001011111101111111111111100000000000",
	"00010l0010011111111111101111000000000010100001h0000000001000001012000000000010000000000000000000",
	"000101101000000000000010100000000000001010000111111111111000001010111111111110000000000000000000",
	"000101101111111111111110111111111111111010000000000000000000001000100000000000000000000000000000",
	"0001Z1100000000000000000000000000000000210000000000000000000001011100000000000000000000000000000",
	"000111111111111111111111111111111111111110000000000000000000001110000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"       
};


char map4[35][100] = { // 왕도의수로  
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000111111111111111111111000000",
	"000000000000000000000000000000000000000000000000000000000000000000000100g000C10001hhhhhhh1000000",
	"0000000000000000000000000000000000000000000000000000000000000000000001011111110101000000h1000000",
	"00000000000000000000001111111111100000000000000000000000000000000000010120000001010111h0h1000000",
	"00000000000000001111111h0001h0001000000000000000000000000000000000000101200000010101hhh0h1000000",
	"000000000000000010000000010100h01000000000000000000000000000000000000101200000010h01h000h1000000",
	"000000000000000010hh011111010h101000001111111111111011111111111111111101200000010001h0hhh1000000",
	"00000000000000001000000khg010010100011100000000000101000001000000000000120000001hhh1000001000000",
	"0000000000000000111111111101h0101111101111111111111c11111110111111111111111011111111111101000000",
	"00000000000111111hhhhhhhh101k010h000000210000000000000000000101hhhhhhhhhhh1010000001000101000000",
	"000000011111hhhhhh000000h1011h1000111110101111111110111111111010000000000010100000010A01k1000000",
	"00011111hhhhh000000hhhh0h13011111110001010100000000000000000101000000000001011111111000111111110",
	"0111hhhhh00000hhhhhh1110111012000000101010100000000000000000111000000000001010000000000000000210",
	"01h0000000hhhhh111111k00100g000hh000100010100000000t00000000131000000000001010000000000000000210",
	"01h0hhhhhh111111hhhh1110101012000000101110100000000000000000101000000000001010000000000000000210",
	"0100h111111h000000000000101011111110001010100000000000000000101033333333301012000000000000000010",
	"010h1100001h0hhhhhhhhhhh1010100000111110101111111111111111111000hhhhhhhhh00012000000000000000010",
	"01011000001h00h00000h000001010000000000010100000001000000000101033333333301012000000000000000010",
	"010100000011hg00hhh000hh111011100000000010100000001000000000101000000000001011111111101111111110",
	"0101000000011hhh111hhh111000001110000000101000000010000B0000101000000000001010001000101000000010",
	"010100000000111110111110000s00001111111110100000001000000000101000000000001010h010h0101011111010",
	"010100000000000000100000000000000000lgl000100000001000000000101000000000001010101010100010000010",
	"0101000000000000001111111111111111111111111000000011011111111010000000000010h010h010111110111010",
	"010100000000000000000000000000000000000000000000001000000000021hhhhhhhhhhh10s00100010000000100010",
	"01011111111111111111111111111111111111111111111111111111111111111111111111111111111111111010p010",
	"0100000000000000g000000000000000000000000000000000000000000000000000b0000l0000a00000000000000010",
	"011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"       
};


char map5[35][100] = { // 백색궁전 
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"    
};



// 타이틀 출력  
void Game::drawTitle(){
	setColor(white, black);
	std::cout<<"\n\n";
	std::cout<<"                                                     @@          @@\n";
	std::cout<<"                                                  (@@              @@)\n";
	std::cout<<"                     @@)               @@          @:    (:@@:)    :@          @@               (@@\n";
	std::cout<<"                    @                 :#            @@@@@@0@@0@@@@@@            #:                 @\n";
	std::cout<<"                   (##@@#:      (#@#<--(@@@@      _-@@            @@-_      @@@@)-->#@#)     :#@@##)\n";
	std::cout<<"                        (@@@@@@@@@         @@@@@@@                    @@@@@@@         @@@@@@@@@)\n\n";
	//
	std::cout<<"                       ####    ####   ######   ####      ####        ######   ####           ####\n";
	std::cout<<"                        ##      ##   ##    ##   ##        ##        ##    ##   ##             ##\n";
	std::cout<<"                        ##      ##  ##      ##  ##        ##       ##      ##  ##             ##\n";
	std::cout<<"                        ##########  ##      ##  ##        ##       ##      ##   ##    ###    ##\n";
	std::cout<<"                        ##      ##  ##      ##  ##        ##       ##      ##   ##   ## ##   ##\n";
	std::cout<<"                        ##      ##  ##      ##  ##        ##       ##      ##    ## ##   ## ##\n";
	std::cout<<"                        ##      ##   ##    ##   ##     #  ##     #  ##    ##     ## ##   ## ##\n";
	std::cout<<"                       ####    ####   ######   ######### #########   ######       ####   ####\n\n";
	//
	std::cout<<"            @@)                                      * E S C A P E *                                     (@@\n";
	std::cout<<"           @     @@         @@@)                                                        (@@@         @@     @\n";
	std::cout<<"          @    _@  @       @          @@@@@@    _____@@#<<(==)>>#@@_____    @@@@@@          @       @  @_    @\n";
	std::cout<<"          (#@@#@       @@@@:@@@@@@@@@@  || @@@@@  | @ << (-==-) >> @ |  @@@@@ ||  @@@@@@@@@@:@@@@       @#@@#)\n";
	std::cout<<"               @@@@@@@@              @@@@@   |  @@@@ --<< (==) >>-- @@@@  |   @@@@@              @@@@@@@@\n";
	std::cout<<"                                      @   @###@@@  @@@@_        _@@@@  @@@###@   @\n";
	std::cout<<"                                                       @-  ()  -@\n";
	std::cout<<"                                                        @------@\n";
	std::cout<<"                                                         @@__@@\n";
	
	gotoxy(112, 34);
	std::cout<<"v"<<VERSION;
}

void Game::help(){
	system("cls");
	gotoxy(53, 3);
	std::cout<<"<<{ 도움말 }>>";
	gotoxy(44, 4);
	std::cout<<"Hollow Escape는 탈출형 게임입니다.";
	gotoxy(35, 5);
	std::cout<<"Hollow Knight라는 게임의 방식을 일부 적용시켰습니다.";
	
	gotoxy(35, 7);
	std::cout<<"플레이어가 목적지에 도착하면 되는 간단한 게임입니다.";
	gotoxy(28, 8);
	std::cout<<"잠겨있는 문, 레버, 방해물 및 위험요소들이 있으니 조심해야합니다.";
	
	gotoxy(53, 12);
	std::cout<<"<<{ 조작법 }>>";
	gotoxy(52, 13);
	std::cout<<"이동: 화살표 키";
	gotoxy(54, 14);
	std::cout<<"선택: ENTER";
	
	gotoxy(28, 16);
	std::cout<<"플레이어: ";
	setColor(cyan, black);
	std::cout<<"O";
	setColor(white, black);
	std::cout<<" - 체력은 5칸이며 죽으면 그 위치에 그림자가 풀어집니다.";
	
	gotoxy(28, 17);
	std::cout<<"그림자: ";
	setColor(darkgray, black);
	std::cout<<"O";
	setColor(white, black);
	std::cout<<" - 그림자의 위치로 오면 다시 플레이어에게 흡수됩니다.";
	
	gotoxy(28, 18);
	std::cout<<"열쇠: ";
	setColor(yellow, black);
	std::cout<<"*";
	setColor(white, black);
	std::cout<<" - 잠긴문을 열 수 있습니다.";
	
	gotoxy(28, 19);
	std::cout<<"잠긴 문: ";
	setColor(brown, black);
	std::cout<<"|"; 
	setColor(white, black);
	std::cout<<" - 열쇠를 이용하여 열 수 있습니다.";
	
	gotoxy(28, 20);
	std::cout<<"기계 문: ";
	setColor(brown, black);
	std::cout<<"+"; 
	setColor(white, black);
	std::cout<<" - 연결된 레버를 작동시키면 열 수 있습니다."; 
	
	gotoxy(28, 21);
	std::cout<<"레버: ";
	setColor(brown, black);
	std::cout<<"!"; 
	setColor(white, black);
	std::cout<<" - 연결된 기계문을 열어줍니다."; 
	
	gotoxy(28, 22);
	std::cout<<"가시: ";
	setColor(red, black);
	std::cout<<"x";
	setColor(white, black);
	std::cout<<" - 부딛히면 체력이 떨어집니다."; 
	
	gotoxy(28, 23);
	std::cout<<"총알: ";
	setColor(lightred, black);
	std::cout<<"o";  
	setColor(white, black);
	std::cout<<" - 부딛히면 체력이 떨어집니다."; 
	
	gotoxy(28, 24);
	std::cout<<"속삭이는 뿌리: ";
	setColor(lightpurple, black);
	std::cout<<"Y"; 
	setColor(white, black);
	std::cout<<" - 꿈의 정수를 해방시킵니다."; 
	
	gotoxy(28, 25);
	std::cout<<"꿈의 정수: ";
	setColor(lightpurple, black);
	std::cout<<"@"; 
	setColor(white, black);
	std::cout<<" - 맵의 모든 꿈의 정수를 획득해야 차원문에 들어갈 수 있습니다."; 
	
	gotoxy(28, 26);
	std::cout<<"의자: ";
	setColor(lightgreen, black);
	std::cout<<"="; 
	setColor(white, black);
	std::cout<<" - 부활지점을 의자가 있는위치로 변경합니다. (체력 모두 회복)"; 
	
	gotoxy(28, 27);
	std::cout<<"바위: ";
	setColor(darkgray, black);
	std::cout<<"@"; 
	setColor(white, black);
	std::cout<<" - 플레이어가 밀어낼 수 있습니다."; 
	
	gotoxy(28, 28);
	std::cout<<"차원문: ";
	setColor(black, white);
	std::cout<<"O";
	setColor(white, black);
	std::cout<<" - 목적지: 그림자가 있어야 들어갈 수 있습니다."; 
	gotoxy(28, 29);
	std::cout<<"└ 맵에 속삭이는 뿌리가 있다면 모든 꿈의 정수를 획득해야 들어갈 수 있습니다."; 
	
	setColor(white, black);
	gotoxy(40, 31);
	std::cout<<"ENTER 키를 누르면 메인화면으로 이동합니다.";
	
	while(true){
		Sleep(100);
		int n = keyControl();
		
		if(n == ENTER){
			break;
		}
	} 
}

// 메뉴 출력 및 선택 기능  
int Game::drawMenu(const int x, const int y, const int max){
	bool loop = true;
	int dir = 0;
	
	gotoxy(x, y);
	std::cout<<"  게임시작"; // Code: 0
	gotoxy(x, y+1);
	std::cout<<"  게임방법"; // Code: 1
	gotoxy(x, y+2);
	std::cout<<"    종료"; // Code: 2
	
	gotoxy(x-1, y+dir);
	std::cout<<">";
	gotoxy(x+12, y+dir);
	std::cout<<"<";
	
	while(loop){
		Sleep(100);
		int n = keyControl();
		switch(n){		
			case 2: {
				if(dir > 0) {
					gotoxy(x-1, y+dir);
					std::cout<<" ";
					gotoxy(x+12, y+dir);
					std::cout<<" ";
					dir--;
					gotoxy(x-1, y+dir);
					std::cout<<">";
					gotoxy(x+12, y+dir);
					std::cout<<"<";
				}
				break;
			}
					
			case 3: {
				if(dir < 2) {
					gotoxy(x-1, y+dir);
					std::cout<<" ";
					gotoxy(x+12, y+dir);
					std::cout<<" ";
					dir++;
					gotoxy(x-1, y+dir);
					std::cout<<">";
					gotoxy(x+12, y+dir);
					std::cout<<"<";
				}
				break;
			}
				
			case 4: {
				loop = false;
				break;
			}
		}
	}
	return dir; // 메뉴코드 리턴  
}

int Game::drawMapList(){
	const int x = 53;
	int select = 0;
	bool loop = true;
	
	gotoxy(x-4, 7);
	std::cout<<"*---<<{  맵 선택  }>>---*";
	gotoxy(x-2, 10);
	std::cout<<"> 1. 잊혀진 교차로";
	gotoxy(x, 13);
	std::cout<<"2. 녹색거리";
	gotoxy(x, 16);
	std::cout<<"3. 수정봉우리";
	gotoxy(x, 19);
	std::cout<<"4. 왕도의 수로";
	gotoxy(x, 22);
	std::cout<<"5. 백색궁전";
	gotoxy(x, 25);
	std::cout<<"     메인";
	Sleep(100);
	
	while(loop){
		Sleep(100);
		int n =	keyControl();
		
		switch(n){
			case 2:{
				if(select > 0){
					gotoxy(x-2, 10+(select*3));
					std::cout<<" ";
					select--;
					gotoxy(x-2, 10+(select*3));
					std::cout<<">";
				}
				break;
			}
			
			case 3:{
				if(select < 5){
					gotoxy(x-2, 10+(select*3));
					std::cout<<" ";
					select++;	
					gotoxy(x-2, 10+(select*3));
					std::cout<<">";
				}
				break;
			}
			
			case 4:{
				loop = false;
				break;
			}
		}
	}
	return select;
}

void Game::drawMap(const int wallColor){
	shooterCnt = 0;
	system("cls");
	for(int i=0; i<35; i++){
		for(int j=0; j<95; j++){
			char temp = map[i][j];
			if(temp == '0'){
				setColor(black, black);
				std::cout<<" ";
			} else if(temp == '1'){
				setColor(black, wallColor);
				std::cout<<" ";
			} else if(temp == 'p'){
				setColor(cyan, black);
				std::cout<<"O";
				px = j;
				py = i;
				cx = j;
				cy = i;
				map[i][j] = '0';
			} else if(temp == 'l'){
				setColor(brown, black);
				std::cout<<"|";
			} else if(temp == 'k'){
				setColor(yellow, black);
				std::cout<<"*";
			} else if(temp == 'r'){
				setColor(darkgray, black);
				std::cout<<"@";
			} else if(temp == 's'){
				setColor(lightgreen, black);
				std::cout<<"=";
			} else if(temp == 'h'){
				setColor(red, black);
				std::cout<<"x";
			} else if(temp == '2' || temp == '3'){
				setColor(lightred, black);
				std::cout<<"o";	
				
				struct pos tempPos;
				if(temp == '2'){
					if(map[i][j-1] == '1'){ // 왼쪽에 벽이 있을경우  
						tempPos.dir = true; // 오른쪽으로 이동 
					} else {
						tempPos.dir = false;
					} 
				} else if(temp == '3') {
					if(map[i-1][j] == '1'){ // 위에 벽이 있을경우  
						tempPos.dir = true; // 아래로 이동 
					} else {
						tempPos.dir = false;
					} 
				}
				tempPos.x = j;
				tempPos.y = i; 
				shooter[shooterCnt++] = tempPos;
			} else if(temp == 'a' || temp == 'b' || temp == 'c' || temp == 'd' || temp == 'e') {
				setColor(brown, black);
				std::cout<<"+";
				switch(temp){
					case 'a':{
						locked[0] = j;
						locked[1] = i;
						break;
					}
					
					case 'b':{
						locked[2] = j;
						locked[3] = i;
						break;
					}
					
					case 'c':{
						locked[4] = j;
						locked[5] = i;
						break;
					}
					
					case 'd':{
						locked[6] = j;
						locked[7] = i;
						break;
					}
					
					case 'e':{
						locked[8] = j;
						locked[9] = i;
						break;
					}
				}
			} else if(temp == 'A' || temp == 'B' || temp == 'C' || temp == 'D' || temp == 'E'){
				setColor(brown, black);
				std::cout<<"!";
			} else if(temp == 'g'){
				setColor(black, black);
				std::cout<<" ";
				essencePos[totalEssence*2] = j;
				essencePos[totalEssence*2+1] = i;
				totalEssence++;
			} else if(temp == 't'){
				setColor(lightpurple, black);
				std::cout<<"Y";	
			} else if(temp == 'Z'){
				setColor(black, white);
				std::cout<<"O";
			} else {
				setColor(white, black);
				std::cout<<temp;
			}
		}
		setColor(wallColor, black);
		std::cout<<"|\n";
	}
	drawUI();
}

void Game::drawUI(){
	setColor(white, black);
	gotoxy(100, 5);
	std::cout<<"*-<<{ 정보 }>>-*";
	
	gotoxy(103, 8);
	std::cout<<"열쇠: ";
	setColor(yellow, black);
	std::cout<<key;
	setColor(white, black);
	std::cout<<"개";
	
	setColor(white, black);
	gotoxy(103, 10);
	std::cout<<"생명: ";
	setColor(lightred, black);
	std::cout<<hp;
	
	setColor(white, black);
	gotoxy(102, 12);
	std::cout<<"그림자: ";
	setColor(darkgray, black);
	if(hasShadow){
		std::cout<<"있음";
	} else {
		std::cout<<"없음";
	}
	
	
	
	if(needEssence){
		setColor(white, black);
		gotoxy(102, 14);
		std::cout<<"{ 꿈의 정수 }";
		gotoxy(106, 15);
		setColor(lightpurple, black);
		std::cout<<essence<<"/"<<totalEssence;
	}
	
	setColor(white, black);
	gotoxy(103, 30);
	std::cout<<"            ";
	gotoxy(103, 30);
	std::cout<<"좌표: "<<px<<", "<<py;
	
	gotoxy(100, 32);
	std::cout<<"                  ";
	gotoxy(100, 32);
	std::cout<<"체크포인트: ";
	setColor(lightgreen, black); 
	std::cout<<cx<<", "<<cy;
	setColor(white, black); 
}

int Game::drawPauseMenu(){
	const int x = 104;
	int select = 0;
	bool loop = true;
	
	gotoxy(x-2, 20);
	std::cout<<"> 계속하기";
	gotoxy(x, 21);
	std::cout<<"메인으로";
	Sleep(100);
	
	while(loop){
		Sleep(100);
		int n =	keyControl();
		
		switch(n){
			case 2:{
				if(select > 0){
					gotoxy(x-2, 20+select);
					std::cout<<" ";
					select--;
					gotoxy(x-2, 20+select);
					std::cout<<">";
				}
				break;
			}
			
			case 3:{
				if(select < 1){
					gotoxy(x-2, 20+select);
					std::cout<<" ";
					select++;	
					gotoxy(x-2, 20+select);
					std::cout<<">";
				}
				break;
			}
			
			case 4:{
				loop = false;
				break;
			}
		}
	}
	return select;
}

void Game::stopBgm(){
	sound.StopSound();
	bgmStarted = false;
}

void Game::playBgm(const int code){
	if(!bgmStarted) {
		sound.SoundPlay(code);
		bgmStarted = true;
	}
}

// 게임 루프 시작  
void Game::gStart(){
	system("cls");
	inGame = false;
	int wall = 0;
	int n = drawMapList();
		
	switch(n){
		case 0:{
			setMap(CROSSROAD);
			wall = darkgray;
			inGame = true;
			break;
		}
		
		case 1:{
			setMap(GREENPATH);
			wall = green;
			inGame = true;
			break;
		}
		
		case 2:{
			setMap(CRYSTAL);
			wall = purple;
			inGame = true;
			break;
		}
		
		case 3:{
			setMap(WATERWAY);
			wall = cyan;
			inGame = true;
			break;
		}
		
		case 4:{
			setMap(WHITEPALACE);
			wall = white;
			inGame = true;
			break;
		}
		
		case 5:
		default: {
			return;
		}
	}
	
	gameInit();
	drawMap(wall);
	Sleep(100);

	while(inGame){ // 게임 루프 
		int k = keyControl();
		 
		switch(k){
			case DR_LEFT:{
				move(-1, 0);
				break;
			}
			
			case DR_RIGHT:{
				move(1, 0);
				break;
			}
			
			case DR_UP:{
				move(0, -1);
				break;
			}
			
			case DR_DOWN:{
				move(0, 1); // y+1
				break;
			}
			
			case ESCAPE:{
				int n = drawPauseMenu();
				if(n == 0) {
					gotoxy(100, 20);
					std::cout<<"            ";
					gotoxy(100, 21);
					std::cout<<"            ";
					break;	
				} else {
					inGame = false;
				}
			}
		}
		
		objectMgr();
		drawUI();
		hpCheck();
		Sleep(100);	
	}
}

void Game::move(const int x, const int y){
	char mapObject = map[py+y][px+x];
	
	if(mapObject == '0' || mapObject == '2' || mapObject == '3'){ // 비어있음 or 총알  
		drawPlayer(x, y);
		if(checkpoint && changedSpawnpoint){
			checkpoint = false;
			gotoxy(cx, cy);
			setColor(lightgreen, black);
			std::cout<<"=";
		}
	} else if(mapObject == 'k'){ // 열쇠 아이템  
		sound.SoundPlay(GET_ITEM);  
		key++;
		map[py+y][px+x] = '0';
		drawPlayer(x, y);
	} else if(mapObject == 'l'){ // 잠긴 문 
		if(key > 0){
			sound.SoundPlay(USE_KEY);  
			key--;
			map[py+y][px+x] = '0';
			gotoxy(px+x, py+y);
			std::cout<<" ";
		}
	} else if(mapObject == 'r'){ // 돌  
		if(map[py+(y*2)][px+(x*2)] == '0'){
			sound.SoundPlay(PUSH); 
			gotoxy(px+(x*2), py+(y*2));
			setColor(darkgray, black);
			std::cout<<"@";	
			map[py+y][px+x] ='0';
			map[py+y*2][px+x*2] ='r';
			drawPlayer(x, y);
		}
	} else if(mapObject == 'h'){
		sound.SoundPlay(DAMAGE);
		hp--;
	} else if(mapObject == 'A' || mapObject == 'B' || mapObject == 'C' || mapObject == 'D' || mapObject == 'E'){ // 레버
		sound.SoundPlay(LEVER);
		map[py+y][px+x] = '0';
		switch(mapObject){
			case 'A':{
				openDoor(locked[0], locked[1], 'a');
				break;
			}
			
			case 'B':{
				openDoor(locked[2], locked[3], 'b');
				break;
			}
			
			case 'C':{
				openDoor(locked[4], locked[5], 'c');
				break;
			}
			
			case 'D':{
				openDoor(locked[6], locked[7], 'd');
				break;
			}
			
			case 'E':{
				openDoor(locked[8], locked[9], 'e');
				break;
			}
		}
		drawPlayer(x, y);
	} else if(mapObject == 's'){ // 스폰 포인트
		changedSpawnpoint = true;
		sound.SoundPlay(CHECKPOINT);  
		cx = px+x;
		cy = py+y;
		checkpoint = true;
		hp = 5;
		drawPlayer(x, y);
	} else if(mapObject == 't'){
		sound.SoundPlay(DREAM);
		map[py+y][px+x] = '0';
		needEssence = true;
		setColor(lightpurple, black);
		for(int i=0; i<totalEssence; i++){
			int x = essencePos[i*2];
			int y = essencePos[i*2+1];
			gotoxy(x, y);
			std::cout<<"@";
		}
		setColor(white, black);
		drawPlayer(x, y);
	} else if(mapObject == 'g'){
		if(needEssence){
			essence++;
			if(totalEssence == essence){
				sound.SoundPlay(LAST);
			} else {
				sound.SoundPlay(GET_ESSENCE);
			}
			map[py+y][px+x] = '0';
		}
		drawPlayer(x, y);
	} else if(mapObject == 'Z'){
		if(hasShadow){
			if(totalEssence == 0){
				gameClear();
			} else if(totalEssence == essence) {
				gameClear();
			}
		}
	}
}

int Game::keyControl(){
	if(GetAsyncKeyState(VK_LEFT) & 0x8000){ // < 0
		return DR_LEFT;
	}else if(GetAsyncKeyState(VK_RIGHT) & 0x8000){
		return DR_RIGHT;
	}else if(GetAsyncKeyState(VK_UP) & 0x8000){
		return DR_UP;
	}else if(GetAsyncKeyState(VK_DOWN) & 0x8000){
		return DR_DOWN;
	} else if(GetAsyncKeyState(VK_RETURN) & 0x8000){
		return ENTER;
	} else if(GetAsyncKeyState(VK_ESCAPE) & 0x8000){
		return ESCAPE;
	} else {
		return -1;
	}
}

void Game::setMap(const int n){
	switch(n){
		default:
		case 0:{
			memcpy(map, map1, sizeof(map));
			break;
		}
		
		case 1:{
			memcpy(map, map2, sizeof(map));
			break;
		}
		
		case 2:{
			memcpy(map, map3, sizeof(map));
			break;
		}
		
		case 3:{
			memcpy(map, map4, sizeof(map));
			break;
		}
		
		case 4:{
			memcpy(map, map5, sizeof(map));
			break;
		}		
	}
}

void Game::gameInit(){
	key = 0;
	hp = 5;
	flag = 0;
	hasShadow = true;
	changedSpawnpoint = false;
	needEssence = false;
	totalEssence = 0;
	essence = 0;
	for(int i=0; i<10; i++){
		locked[i] = 0;
	}
	
	checkpoint = false;
}


void Game::objectMgr(){	
	for(int i=0; i<shooterCnt; i++){
		struct pos* target = &shooter[i];
		int x = target->x;
		int y = target->y;
		gotoxy(x, y);
		std::cout<<" ";
		
		char temp = map[y][x];
				
		if(temp == '2'){
			if(target->dir){
				if(map[y][x+1] == '0'){
					map[y][x] = '0';
					map[y][x+1] = '2';
					
					target->x++;
					
					gotoxy(x+1, y);
					setColor(lightred, black);
					std::cout<<"o";
				} else {
					shooter[i].dir = false;
				}
			} else {
				if(map[y][x-1] == '0'){
					map[y][x] = '0';
					map[y][x-1] = '2';
					
					target->x--;
					
					gotoxy(x-1, y);
					setColor(lightred, black);
					std::cout<<"o";
				} else {
					shooter[i].dir = true;
				}
			}
		} else if(temp == '3'){
			if(target->dir){
				if(map[y+1][x] == '0'){
					map[y][x] = '0';
					map[y+1][x] = '3';
					
					target->y++;
				
					gotoxy(x, y+1);
					setColor(lightred, black);
					std::cout<<"o";
				} else {
					shooter[i].dir = false;
				}
			} else {
				if(map[y-1][x] == '0'){
					map[y][x] = '0';
					map[y-1][x] = '3';
					
					target->y--;
					
					gotoxy(x, y-1);
					setColor(lightred, black);
					std::cout<<"o";
				} else {
					shooter[i].dir = true;
				}
			}
		}
		
		if(target->x == px && target->y == py){
			sound.SoundPlay(DAMAGE);
			hp--;
		}
	}
	
	if(px == sx && py == sy){
		sx = 0;
		sy = 0;
		sound.SoundPlay(GET_SHADOW);
		hasShadow = true;
	}
	
	drawPlayer(0, 0);
}

void Game::hpCheck(){
	if(hp <= 0){
		gameOver();
	}
}

// 게임 초기화  
void Game::Init(){
	system("mode con cols=120 lines=36 | title Hollow Escape"); 
	hideCursor();
}

void Game::drawPlayer(const int x, const int y){
	gotoxy(px, py);
	std::cout<<" ";
	gotoxy(px+x, py+y);
	setColor(cyan, black);
	std::cout<<"O";
	px+=x;
	py+=y;
	
	if(!hasShadow){
		gotoxy(sx, sy);
		setColor(darkgray, black);
		std::cout<<"0";
		setColor(white, black);
	}
}

void Game::gameOver(){
	sound.SoundPlay(DEATH);
	if(hasShadow){
		gotoxy(px, py);
		setColor(darkgray, black);
		std::cout<<"O";
		sx = px;
		sy = py;
	} else {
		gotoxy(px, py);
		std::cout<<" ";
	}
	px = cx;
	py = cy;
	hp = 5;
	hasShadow = false;
	checkpoint = true;
	setColor(white, black);
	Sleep(3000);
}

void Game::gameClear(){
	inGame = false;
	setColor(black, white);
	gotoxy(36, 12);
	std::cout<<"                     "; gotoxy(36, 13);
	std::cout<<"                     "; gotoxy(36, 14);
	std::cout<<"     C L E A R !     "; gotoxy(36, 15);
	std::cout<<"                     "; gotoxy(36, 16);
	std::cout<<"                     ";
	Sleep(3000);
}

void Game::openDoor(const int x, const int y, const char target){
	gotoxy(103, 18);
	std::cout<<"            ";
	gotoxy(103, 18);
	std::cout<<x<<", "<<y<<" 열림!";
	
	for(int i=-1; i<=1; i++){
		if(map[y][x+i] == target){
			map[y][x+i] = '0';
			gotoxy(x+i, y);
			std::cout<<" ";
		}
	}
	
	for(int i=-1; i<=1; i++){
		if(map[y+i][x] == target){
			map[y+i][x] = '0';
			gotoxy(x, y+i);
			std::cout<<" ";
		}
	}
}
